#!/usr/bin/env python3
# -*- coding: UTF-8 -*-# enable debugging
# -*-python-*-

import ast
import os
import sys
import json
import MySQLdb
import trifire

from cgi_util import get_json_post

# This turns on a Python trace capture (ignoring DeprecationWarning)
import warnings
with warnings.catch_warnings():
    warnings.filterwarnings("ignore", category=DeprecationWarning)
    import cgi
    import cgitb
    cgitb.enable()


# The requests purports to have access to this database
USER = os.getenv('USER','www-data')

try:
    db = MySQLdb.connect(host='localhost',user=USER,db='trifire')
except:
    print('Content-Type: text/html;charset=utf-8')
    print()
    print('db?')
    sys.exit(0)

with db.cursor() as cur:
    sql = 'SELECT turn,state FROM state ORDER BY turn DESC LIMIT 1'
    try:
        cur.execute(sql)
        turn,state = cur.fetchone()
    except:
        print('Content-Type: text/html;charset=utf-8')
        print()
        print('db fetch?')
        sys.exit(0)

# Send raw bmp
bmp = trifire.bmp(ast.literal_eval(state))
sys.stdout.buffer.write(b"Content-Type: image/bmp\r\n")
sys.stdout.buffer.write(b"Content-Length: %d\r\n" % len(bmp))
sys.stdout.buffer.write(b"Cache-Control: no-store, no-cache, must-revalidate\r\n")
sys.stdout.buffer.write(b"Pragma: no-cache\r\n")
sys.stdout.buffer.write(b"Expires: 0\r\n")
sys.stdout.buffer.write(b"\r\n")
sys.stdout.buffer.write(bmp)

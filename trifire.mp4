#!/usr/bin/env python3
# -*- coding: UTF-8 -*-# enable debugging
# -*-python-*-

import MySQLdb
import ast
import cv2
import json
import numpy as np
import os
import sys
import tempfile
import trifire

from cgi_util import get_json_post

# This turns on a Python trace capture (ignoring DeprecationWarning)
import warnings
with warnings.catch_warnings():
    warnings.filterwarnings("ignore", category=DeprecationWarning)
    import cgi
    import cgitb
    cgitb.enable()


# The requests purports to have access to this database
USER = os.getenv('USER','www-data')

try:
    db = MySQLdb.connect(host='localhost',user=USER,db='trifire')
except:
    print('Content-Type: text/html;charset=utf-8')
    print()
    print('db?')
    sys.exit(0)

with db.cursor() as cur:
    sql = 'SELECT turn,state FROM state ORDER BY turn'
    try:
        cur.execute(sql)
        rows = cur.fetchall()
    except:
        print('Content-Type: text/html;charset=utf-8')
        print()
        print('db fetch?')
        sys.exit(0)

# We don't want this movie to be super fast when we only have a handful
# of frames (like 1 fps), but it should not take forever as it gets big
# maybe ceil(log_10**2) fps?
#    10 frames @  1fps =  10 seconds
#   100 frames @  4fps =  25 seconds
#  1000 frames @  9fps = 100 seconds
# 10000 frames @ 16fps = 625 seconds

with tempfile.NamedTemporaryFile(suffix='.mp4', delete=True) as temp_file:
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    fps = 1
    width = 640
    height = 480
    out = cv2.VideoWriter(temp_file.name, fourcc, 1, (width, height))

    for turn,state_s in rows:
        state = ast.literal_eval(state_s)
        if out is not None:
            rgb = [((x & 0xFF0000)>>16, (x & 0xFF00)>>8, (x & 0xFF))
                   for x in trifire.render(state)]
            frame_rgb = np.array(rgb,dtype=np.uint8).reshape(480,640,3)
            frame_bgr = frame_rgb[:, :, ::-1]
            out.write(frame_bgr)
    out.release()
    mp4_file = open(temp_file.name,'rb')  # Open before delete

mp4 = b''
while 1:
    b = mp4_file.read()
    if not b: break
    mp4 += b
    
sys.stdout.buffer.write(b"Content-Type: video/mp4\r\n")
sys.stdout.buffer.write(b"Content-Length: %d\r\n" % len(mp4))
sys.stdout.buffer.write(b"Cache-Control: no-store, no-cache, must-revalidate\r\n")
sys.stdout.buffer.write(b"Pragma: no-cache\r\n")
sys.stdout.buffer.write(b"Expires: 0\r\n")
sys.stdout.buffer.write(b"\r\n")
sys.stdout.buffer.write(mp4)
